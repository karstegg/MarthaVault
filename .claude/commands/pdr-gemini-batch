#!/bin/bash

# /pdr-gemini-batch - Process Multiple Daily Reports using FREE Gemini AI in parallel
# Usage: /pdr-gemini-batch [start_date] [end_date]
# Example: /pdr-gemini-batch 2025-07-06 2025-07-21
# Example: /pdr-gemini-batch (uses default July 6-21 range)

# Default date range for July 6-21
DEFAULT_START="2025-07-06"
DEFAULT_END="2025-07-21"

# Parse arguments
START_DATE="${1:-$DEFAULT_START}"
END_DATE="${2:-$DEFAULT_END}"

# Validate date format (basic check)
if ! echo "$START_DATE" | grep -qE '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
    echo "❌ Error: Invalid start date format. Use YYYY-MM-DD"
    echo "Usage: /pdr-gemini-batch [start_date] [end_date]"
    echo "Example: /pdr-gemini-batch 2025-07-06 2025-07-21"
    exit 1
fi

if ! echo "$END_DATE" | grep -qE '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'; then
    echo "❌ Error: Invalid end date format. Use YYYY-MM-DD"
    echo "Usage: /pdr-gemini-batch [start_date] [end_date]"
    echo "Example: /pdr-gemini-batch 2025-07-06 2025-07-21"
    exit 1
fi

# Check if gh CLI is available
if ! command -v gh &> /dev/null; then
    echo "❌ Error: GitHub CLI (gh) not found. Please install it first."
    exit 1
fi

# Calculate date range info
START_EPOCH=$(date -d "$START_DATE" +%s 2>/dev/null || echo "0")
END_EPOCH=$(date -d "$END_DATE" +%s 2>/dev/null || echo "0")

if [ "$START_EPOCH" -eq 0 ] || [ "$END_EPOCH" -eq 0 ]; then
    echo "❌ Error: Invalid date format or date calculation failed"
    exit 1
fi

if [ "$START_EPOCH" -gt "$END_EPOCH" ]; then
    echo "❌ Error: Start date must be before or equal to end date"
    exit 1
fi

# Calculate number of days
DAYS=$(( (END_EPOCH - START_EPOCH) / 86400 + 1 ))

echo "🚀 Starting FREE Gemini AI BATCH PDR processing"
echo ""
echo "📅 Date Range: $START_DATE to $END_DATE"
echo "📊 Total Days: $DAYS days"
echo "🤖 Processing: FREE Gemini AI (parallel execution)"
echo "⚡ Concurrency: Max 3 workflows running simultaneously"
echo ""

# Calculate cost savings
CLAUDE_COST_CENTS=$((39 * DAYS))
CLAUDE_COST_DOLLARS=$((CLAUDE_COST_CENTS / 100))
CLAUDE_COST_REMAINING=$((CLAUDE_COST_CENTS % 100))

echo "💰 Cost Analysis:"
echo "  - Gemini AI: $0.00 (FREE)"
echo "  - Claude equivalent: \$${CLAUDE_COST_DOLLARS}.$(printf "%02d" $CLAUDE_COST_REMAINING)"
echo "  - Savings: \$${CLAUDE_COST_DOLLARS}.$(printf "%02d" $CLAUDE_COST_REMAINING)"
echo ""

echo "🚀 Triggering Gemini AI batch workflow..."

# Send repository dispatch to trigger batch workflow
echo '{"event_type": "gemini-batch", "client_payload": {"start_date": "'$START_DATE'", "end_date": "'$END_DATE'"}}' | gh api repos/karstegg/MarthaVault/dispatches --method POST --input -

if [ $? -eq 0 ]; then
    echo "✅ Gemini AI batch workflow triggered successfully"
    echo ""
    echo "📊 What happens next:"
    echo "1. 🔄 Date range generation ($START_DATE to $END_DATE)"
    echo "2. 🔍 Parallel WhatsApp data extraction from Codespace"
    echo "3. 🤖 FREE Gemini AI processing for each date (max 3 concurrent)"
    echo "4. ⚙️  JSON and Markdown file generation for all sites"
    echo "5. 📝 Automatic validation and file organization"
    echo "6. 🔄 Automatic branch creation with all results"
    echo "7. 📋 Batch processing summary issue creation"
    echo ""
    echo "⏱️  Expected completion: 15-45 minutes (depending on data volume)"
    echo "🔗 Monitor progress: https://github.com/karstegg/MarthaVault/actions"
    echo "📋 Issues will be created for tracking and final summary"
    echo ""
    echo "💡 Benefits: FREE parallel processing vs Claude (\$${CLAUDE_COST_DOLLARS}.$(printf "%02d" $CLAUDE_COST_REMAINING) savings)"
    echo "📈 Scaling: Processing $DAYS days automatically"
    echo "⚡ Speed: Parallel execution with Gemini 2.0 Flash Exp model"
    echo "🎯 Output: Complete July production report archive"
else
    echo "❌ Failed to trigger Gemini AI batch workflow"
    echo "🔍 Check GitHub CLI authentication and repository access"
    exit 1
fi