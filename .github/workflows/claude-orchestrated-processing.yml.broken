name: 🤖 Claude Orchestrated WhatsApp Report Processing

on:
  # Triggered by Claude Cloud via GitHub Issues
  issues:
    types: [opened]
  
  # Triggered by Claude Cloud via repository dispatch
  repository_dispatch:
    types: [claude_process_reports]
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      report_date:
        description: 'Report date (YYYY-MM-DD)'
        required: true
        type: string
      trigger_source:
        description: 'Who/what triggered this'
        required: false
        default: 'manual'
        type: string

jobs:
  orchestrate-codespace-processing:
    runs-on: ubuntu-latest
    # Only trigger for autonomous processing issues
    if: |
      (github.event_name == 'issues' && 
       contains(github.event.issue.title, 'Autonomous Process WhatsApp Reports')) ||
      github.event_name == 'repository_dispatch' ||
      github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📋 Parse Claude Orchestration Request
      id: parse-request
      run: |
        echo "🤖 Claude Cloud Orchestration Request Received"
        
        # Parse different trigger sources
        if [ "${{ github.event_name }}" == "issues" ]; then
          # Extract processing request from GitHub Issue
          issue_title="${{ github.event.issue.title }}"
          issue_body="${{ github.event.issue.body }}"
          
          echo "📝 Processing GitHub Issue: $issue_title"
          
          # Parse date from issue (Claude creates structured issues)
          if [[ "$issue_title" =~ ([0-9]{4}-[0-9]{2}-[0-9]{2}) ]]; then
            report_date="${BASH_REMATCH[1]}"
            echo "📅 Extracted date: $report_date"
          else
            echo "❌ No valid date found in issue title"
            exit 1
          fi
          
          trigger_source="claude_cloud_issue"
          
        elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
          # Extract from repository dispatch payload
          report_date="${{ github.event.client_payload.report_date }}"
          trigger_source="claude_cloud_dispatch"
          
        else
          # Manual workflow dispatch
          report_date="${{ inputs.report_date }}"
          trigger_source="${{ inputs.trigger_source }}"
        fi
        
        echo "report_date=$report_date" >> $GITHUB_OUTPUT
        echo "trigger_source=$trigger_source" >> $GITHUB_OUTPUT
        
        echo "✅ Orchestration request parsed successfully"
        echo "📅 Report Date: $report_date"
        echo "🎯 Trigger Source: $trigger_source"

    - name: 🔥 Execute Codespace Processing via GitHub CLI
      id: codespace-execution
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "🚀 Triggering Codespace execution for ${{ steps.parse-request.outputs.report_date }}"
        
        # Use GitHub CLI to execute command in active Codespace
        # This requires a running Codespace with the WhatsApp MCP server
        
        # Find active codespace
        CODESPACE_NAME=$(gh codespace list --repo ${{ github.repository }} --json name,state | jq -r '.[] | select(.state=="Available") | .name' | head -1)
        
        if [ -z "$CODESPACE_NAME" ]; then
          echo "❌ No active Codespace found"
          echo "💡 Please ensure a Codespace is running with WhatsApp MCP server"
          exit 1
        fi
        
        echo "✅ Found active Codespace: $CODESPACE_NAME"
        
        # Execute the processing script in Codespace
        echo "🔄 Executing WhatsApp report processing..."
        
        # The magic: Run our Python script in Codespace remotely
        gh codespace ssh -c "$CODESPACE_NAME" -- "cd /workspaces/MarthaVault && python3 .devcontainer/codespace-direct-processing.py ${{ steps.parse-request.outputs.report_date }}"
        
        EXECUTION_STATUS=$?
        
        if [ $EXECUTION_STATUS -eq 0 ]; then
          echo "✅ Codespace processing completed successfully"
          echo "execution_status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Codespace processing failed"
          echo "execution_status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: 📊 Generate Processing Report
      if: always()
      run: |
        echo "📋 CLAUDE ORCHESTRATED PROCESSING REPORT"
        echo "========================================"
        echo "📅 Report Date: ${{ steps.parse-request.outputs.report_date }}"
        echo "🎯 Triggered By: ${{ steps.parse-request.outputs.trigger_source }}"
        echo "⚡ Execution Status: ${{ steps.codespace-execution.outputs.execution_status }}"
        echo "🕐 Processing Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        if [ "${{ steps.codespace-execution.outputs.execution_status }}" == "success" ]; then
          echo "✅ SUCCESS SUMMARY:"
          echo "  🔄 WhatsApp MCP data extracted from Codespace"
          echo "  🧠 Gemini processed reports (in Codespace)" 
          echo "  💾 Structured JSON/Markdown files created"
          echo "  🚀 Committed directly to master branch"
          echo ""
          echo "📂 Files created at: daily_production/data/$(date -d '${{ steps.parse-request.outputs.report_date }}' '+%Y-%m/%d')/"
          echo ""
          echo "🎯 NEXT: Claude Cloud will automatically review the results"
          
        else
          echo "❌ FAILURE SUMMARY:"
          echo "  💥 Processing failed - see execution logs above"
          echo "  🔍 Check Codespace availability and WhatsApp MCP server status"
          echo ""
          echo "🎯 NEXT: Manual intervention may be required"
        fi

    - name: 🏷️ Create Results Issue for Claude Review
      if: steps.codespace-execution.outputs.execution_status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a GitHub Issue that Claude Cloud will automatically pick up for review
        gh issue create \
          --title "🤖 Claude Review Required: ${{ steps.parse-request.outputs.report_date }} Reports" \
          --body "## Autonomous Processing Complete ✅

**Report Date**: ${{ steps.parse-request.outputs.report_date }}
**Processed By**: Codespace WhatsApp MCP + Gemini
**Trigger**: ${{ steps.parse-request.outputs.trigger_source }}
**Status**: Ready for Claude Cloud review

### Files Created
📂 \`daily_production/data/$(date -d '${{ steps.parse-request.outputs.report_date }}' '+%Y-%m/%d')/\`

### Claude Cloud Review Tasks
- [ ] Verify data accuracy against WhatsApp source
- [ ] Confirm template compliance (Report Templates folder)
- [ ] Check JSON schema consistency
- [ ] Validate equipment codes and BEV analysis
- [ ] Approve or request corrections

### Review Priority
🟡 **Medium** - Autonomous processing, human spot-check recommended

---
/label: claude-review,daily-production,autonomous
**Auto-generated by Claude Orchestration System**" \
          --label "claude-review,daily-production,autonomous,needs-review"

    - name: 🔔 Notify Completion
      if: always()
      run: |
        echo "🎉 CLAUDE ORCHESTRATED PROCESSING CYCLE COMPLETE"
        echo ""
        echo "📋 What happened:"
        echo "  1. ✅ Claude Cloud triggered processing via GitHub"
        echo "  2. ✅ GitHub Actions orchestrated Codespace execution"
        echo "  3. ✅ Codespace executed with live WhatsApp MCP data"
        echo "  4. ✅ Results committed to repository"
        echo "  5. ✅ Review issue created for Claude Cloud"
        echo ""
        echo "🔄 The autonomous cycle continues..."
        echo "Next: Claude Cloud will review and approve/correct the results"