name: Gemini Production Test

on:
  repository_dispatch:
    types: [gemini-production-test]

jobs:
  gemini-production:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create Test WhatsApp Data
      run: |
        mkdir -p daily_production/data/2025-07/14
        cat > whatsapp_data_test.txt << 'EOF'
        2025-07-14 04:38:38+00:00|27834418149-1537194373@g.us|27761234567@s.whatsapp.net|**Gloria Report**

        **Safety** - All clear

        **Production:**
        **ROM* - 1689 vs 0
        **Decline** - 1499 vs 0
        **Product** - 2000 vs 0

        **Loads** - 73

        **Availability:**
        - DTs: 100
        - FLs: 80
        - HDs: 100
        - RTs: 92
        - SRs: 50

        **Shift readiness:**
        DT:   6/6
        FL:   4/5
        HD:   4/4
        RT:   4/4
        SR:   3/4

        **Breakdowns:**
        - FL0083 Speed sensor/ Bucket movement
        - SR0037 Tail frame

        **Other:**
        - Main fans In Order
        EOF
        
    - name: Process with Gemini AI
      uses: 'google-github-actions/run-gemini-cli@v0'
      with:
        gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
        settings: |
          {
            "maxSessionTurns": 10,
            "autoAccept": ["list_directory", "read_file", "write_file", "glob"],
            "telemetry": {
              "enabled": false
            }
          }
        prompt: |
          Read the WhatsApp data from whatsapp_data_test.txt and create production report files.
          
          Create these two files:
          1. JSON file: write_file(file_path="daily_production/data/2025-07/14/2025-07-14_gloria.json", content=[structured_json])
          2. Markdown file: write_file(file_path="daily_production/data/2025-07/14/2025-07-14 – Gloria Daily Report.md", content=[formatted_report])
          
          Use the standard JSON schema with these key sections:
          - report_metadata (date, site, engineer)
          - safety (status, incidents)
          - production (rom, decline, product, loads)
          - equipment_availability (tmm percentages)
          - breakdowns (current issues)
          - source_validation (trace data to source lines)
          
          Extract only actual data from the source - do not invent values.
          
    - name: Verify Files Created
      run: |
        echo "🔍 Checking files created by Gemini..."
        
        if [ -f "daily_production/data/2025-07/14/2025-07-14_gloria.json" ]; then
          echo "✅ JSON file created!"
          echo "📄 JSON content preview:"
          head -20 "daily_production/data/2025-07/14/2025-07-14_gloria.json"
        else
          echo "❌ JSON file missing"
        fi
        
        if [ -f "daily_production/data/2025-07/14/2025-07-14 – Gloria Daily Report.md" ]; then
          echo "✅ Markdown file created!"
          echo "📄 Markdown content preview:"
          head -20 "daily_production/data/2025-07/14/2025-07-14 – Gloria Daily Report.md"
        else
          echo "❌ Markdown file missing"
        fi
        
        # Check directory structure
        echo "📁 Directory structure:"
        find daily_production/data/2025-07/14/ -type f 2>/dev/null || echo "Directory not found"