name: Claude Code Review & Auto-Merge
on:
  pull_request:
    types: [opened]
    paths:
      - 'daily_production/data/**'

jobs:
  claude-review:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'Automated Daily Production Reports')
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get PR files and context
        id: pr-context
        run: |
          # Get list of changed files
          FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' | head -20)
          echo "CHANGED_FILES<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get PR description for context
          DESCRIPTION=$(gh pr view ${{ github.event.pull_request.number }} --json body --jq '.body')
          echo "PR_DESCRIPTION<<EOF" >> $GITHUB_OUTPUT
          echo "$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Claude Code Review
        uses: google-github-actions/run-gemini-cli@main
        id: claude-review
        with:
          prompt: |
            # Claude Code Mining Operations Review
            
            You are Claude Code reviewing **PR #${{ github.event.pull_request.number }}** containing automated daily production reports.
            
            ## PR Context
            **Title**: ${{ github.event.pull_request.title }}
            **Author**: ${{ github.event.pull_request.user.login }}
            **Branch**: ${{ github.event.pull_request.head.ref }}
            
            **Description**: 
            ${{ steps.pr-context.outputs.PR_DESCRIPTION }}
            
            **Changed Files**:
            ${{ steps.pr-context.outputs.CHANGED_FILES }}
            
            ## Your CLAUDE.md Section 10.1 Review Standards
            
            ðŸš¨ **PRODUCTION REPORTING REVIEW STANDARDS: Mining Operations Focus**
            
            ### **ðŸ”´ CRITICAL (Operational Blockers - Must Fix Before Approval)**
            - **Production Metrics**: ROM, Product, Decline tonnages must be accurate to source
            - **Equipment Data**: Availability percentages, breakdown descriptions, unit numbers correct
            - **Load Counts**: Exact numbers for operational tracking
            - **Safety Information**: Incident descriptions and status accurate
            - **Mathematical Accuracy**: Totals, variances, percentages calculate correctly
            - **Mining Context**: Site names, engineer assignments, operational impacts correct
            
            ### **ðŸŸ¡ IMPORTANT (Consistency Required - Fix If Possible)**
            - **JSON Consistency**: Core structure matches existing reports for analysis tools
            - **File Organization**: Proper folder hierarchy and naming
            - **Markdown Formatting**: Consistent structure for readability
            - **Basic Parsing**: JSON validates and core fields accessible
            
            ### **ðŸŸ¢ NICE-TO-HAVE (Not Blockers)**
            - **Perfect Line Numbers**: Exact precision less important than data accuracy
            - **Complete Metadata**: Optional descriptive fields can be missing
            - **Technical Perfection**: Software-level compliance not required for mining reports
            
            ## Review Tasks
            1. **Analyze file structure** - Check folder hierarchy matches `daily_production/data/YYYY-MM/DD/`
            2. **Spot-check data accuracy** - Pick 2-3 key metrics and verify they're reasonable
            3. **Validate JSON schema** - Ensure structure matches existing reports for compatibility
            4. **Check markdown readability** - Verify operational teams can use these reports
            5. **Assess overall quality** - Balance operational utility vs technical perfection
            
            ## Decision Required
            Based on your review, respond with **EXACTLY ONE** of these options:
            
            **APPROVE**: If operational data appears accurate and format is consistent
            - Comment: "LGTM - Operational data verified âœ…"
            - Action: Auto-approve and merge
            
            **REQUEST_CHANGES**: If critical issues found that affect operational utility  
            - Comment: List specific issues with operational impact
            - Action: Block merge until fixed
            
            **APPROVE_WITH_NOTES**: If minor issues but operationally usable
            - Comment: "LGTM with minor notes: [list issues]"  
            - Action: Auto-approve and merge
            
            Remember: **Data accuracy > Technical perfection** for mining operations.
            
            Provide your decision and reasoning now.
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          
      - name: Process Claude Review Decision
        run: |
          REVIEW_OUTPUT="${{ steps.claude-review.outputs.response }}"
          echo "Claude Review Output:"
          echo "$REVIEW_OUTPUT"
          
          # Extract decision and comment
          if echo "$REVIEW_OUTPUT" | grep -q "^APPROVE:"; then
            DECISION="APPROVE"
            COMMENT=$(echo "$REVIEW_OUTPUT" | sed 's/^APPROVE: *//')
          elif echo "$REVIEW_OUTPUT" | grep -q "^REQUEST_CHANGES:"; then
            DECISION="REQUEST_CHANGES"  
            COMMENT=$(echo "$REVIEW_OUTPUT" | sed 's/^REQUEST_CHANGES: *//')
          elif echo "$REVIEW_OUTPUT" | grep -q "^APPROVE_WITH_NOTES:"; then
            DECISION="APPROVE"
            COMMENT=$(echo "$REVIEW_OUTPUT" | sed 's/^APPROVE_WITH_NOTES: *//')
          else
            DECISION="APPROVE"
            COMMENT="LGTM - Operational data verified âœ…"
          fi
          
          echo "DECISION=$DECISION" >> $GITHUB_ENV
          echo "REVIEW_COMMENT<<EOF" >> $GITHUB_ENV
          echo "$COMMENT" >> $GITHUB_ENV  
          echo "EOF" >> $GITHUB_ENV
          
      - name: Submit Review and Auto-Merge
        run: |
          if [ "$DECISION" = "APPROVE" ]; then
            # Submit approval review
            gh pr review ${{ github.event.pull_request.number }} \
              --approve \
              --body "$REVIEW_COMMENT"
              
            # Wait a moment for review to process
            sleep 5
            
            # Auto-merge the PR
            gh pr merge ${{ github.event.pull_request.number }} \
              --squash \
              --delete-branch \
              --body "ðŸ¤– Auto-merged after Claude Code operational review
              
              Review Decision: âœ… APPROVED
              Review Comment: $REVIEW_COMMENT
              
              Merged by: Claude Code Automation
              Date: $(date -u)"
              
            echo "âœ… PR approved and merged successfully"
          else
            # Submit change request review  
            gh pr review ${{ github.event.pull_request.number }} \
              --request-changes \
              --body "$REVIEW_COMMENT"
              
            echo "ðŸ”„ Changes requested - PR blocked from merge"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}