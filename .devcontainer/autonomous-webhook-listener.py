#!/usr/bin/env python3
"""
Autonomous Webhook Listener for Codespace
Listens for repository dispatch events and triggers WhatsApp data extraction
"""

import os
import sys
import time
import subprocess
import requests
import json
from datetime import datetime

class AutonomousWebhookListener:
    def __init__(self):
        self.repo = "karstegg/MarthaVault"
        self.github_token = os.getenv('GITHUB_TOKEN')
        self.check_interval = 30  # Check every 30 seconds
        
    def check_for_processing_requests(self):
        """Check GitHub repository for processing requests via issues or workflow runs"""
        
        headers = {
            'Authorization': f'token {self.github_token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        try:
            # Check for recent issues with autonomous processing request
            url = f"https://api.github.com/repos/{self.repo}/issues"
            params = {
                'state': 'open',
                'sort': 'created',
                'direction': 'desc',
                'per_page': 5
            }
            
            response = requests.get(url, headers=headers, params=params)
            if response.status_code == 200:
                issues = response.json()
                
                for issue in issues:
                    title = issue.get('title', '')
                    created_at = issue.get('created_at', '')
                    
                    # Check if this is a recent autonomous processing request
                    if 'Autonomous Process WhatsApp Reports' in title:
                        created_time = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        now = datetime.now().astimezone()
                        time_diff = (now - created_time).total_seconds()
                        
                        # Process if created within last 5 minutes
                        if time_diff < 300:
                            # Extract date from title
                            import re
                            date_match = re.search(r'(\d{4}-\d{2}-\d{2})', title)
                            if date_match:
                                target_date = date_match.group(1)
                                print(f"üéØ Found processing request for {target_date}")
                                return target_date
                            
            return None
            
        except Exception as e:
            print(f"‚ùå Error checking for processing requests: {e}")
            return None
    
    def extract_whatsapp_data(self, target_date):
        """Extract WhatsApp data for the target date"""
        
        print(f"üì± Starting WhatsApp data extraction for {target_date}")
        
        try:
            # Run the extraction script
            result = subprocess.run([
                'python3', 
                '/workspaces/MarthaVault/.devcontainer/codespace-direct-processing.py',
                target_date,
                '--extract-only'
            ], capture_output=True, text=True, cwd='/workspaces/MarthaVault')
            
            if result.returncode == 0:
                print(f"‚úÖ WhatsApp data extraction successful for {target_date}")
                print("üìä Extracted data preview:")
                print(result.stdout[:500] + "..." if len(result.stdout) > 500 else result.stdout)
                
                # Save extracted data to file for GitHub Actions to pick up
                output_file = f"/workspaces/MarthaVault/extracted_data_{target_date}.txt"
                with open(output_file, 'w') as f:
                    f.write(result.stdout)
                    
                print(f"üíæ Data saved to {output_file}")
                
                # Create commit and push to trigger GitHub Actions
                self.commit_and_push_data(target_date, output_file)
                
                return True
            else:
                print(f"‚ùå WhatsApp data extraction failed: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error during extraction: {e}")
            return False
    
    def commit_and_push_data(self, target_date, data_file):
        """Commit extracted data and push to trigger GitHub Actions"""
        
        try:
            os.chdir('/workspaces/MarthaVault')
            
            # Add the data file
            subprocess.run(['git', 'add', data_file], check=True)
            
            # Commit
            commit_msg = f"data: Add WhatsApp extraction for {target_date}\n\nAutonomous extraction completed, ready for Gemini processing.\n\nü§ñ Generated by Autonomous Codespace System"
            subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
            
            # Push to trigger GitHub Actions
            subprocess.run(['git', 'push', 'origin', 'master'], check=True)
            
            print(f"üöÄ Data committed and pushed - GitHub Actions should trigger")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Git operation failed: {e}")
    
    def run_listener(self):
        """Main listener loop"""
        
        print("üéß Autonomous WhatsApp MCP Listener Started")
        print(f"üì° Monitoring repository: {self.repo}")
        print(f"‚è±Ô∏è  Check interval: {self.check_interval} seconds")
        print("üîç Watching for 'Autonomous Process WhatsApp Reports' issues...")
        print()
        
        while True:
            try:
                target_date = self.check_for_processing_requests()
                
                if target_date:
                    print(f"üéØ Processing request found for {target_date}")
                    success = self.extract_whatsapp_data(target_date)
                    
                    if success:
                        print(f"‚úÖ Autonomous processing completed for {target_date}")
                        print("‚è≥ GitHub Actions should now trigger Gemini processing...")
                    else:
                        print(f"‚ùå Failed to process {target_date}")
                        
                    print()
                else:
                    print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} - No processing requests found")
                
                time.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                print("\nüõë Autonomous listener stopped by user")
                break
            except Exception as e:
                print(f"‚ùå Unexpected error: {e}")
                time.sleep(self.check_interval)

if __name__ == "__main__":
    if not os.getenv('CODESPACES'):
        print("‚ö†Ô∏è  This script is designed to run in GitHub Codespaces")
        
    if not os.getenv('GITHUB_TOKEN'):
        print("‚ùå GITHUB_TOKEN environment variable required")
        sys.exit(1)
    
    listener = AutonomousWebhookListener()
    listener.run_listener()